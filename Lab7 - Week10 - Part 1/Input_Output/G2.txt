program statement statement_list compound_statement add_expression subtract_expression multiply_expression divide_expression arr_expression iostmt simple_type array_declaration declaration assignment_statement if_statement while_statement condition relation
start ; { } + - * / ) ( read write IDENTIFIER CONST array [ ] = if else while return for int string char < <= == != >= >
program
program->start compound_statement
statement->declaration|assignment_statement|if_statement|while_statement|iostmt
statement_list->statement ;|statement_list statement ;
compound_statement->{ statement_list }
add_expression->ar_expression + ar_expression
subtract_expression->ar_expression - ar_expression
multiply_expression->ar_expression * ar_expression
divide_expression->ar_expression / ar_expression
term->IDENTIFIER|CONST
ar_expression->add_expression|subtract_expression|multiply_expression|divide_expression|term
iostmt->read ( IDENTIFIER )|write ( IDENTIFIER )|write ( CONST )
simple_type->int|string|char
array_declaration->array simple_type IDENTIFIER [ ]
declaration->simple_type IDENTIFIER|array_declaration
assignment_statement->IDENTIFIER = ar_expression
if_statement->if ( condition ) compound_statement else compound_statement
while_statement->while ( condition ) compound_statement
condition->ar_expression relation ar_expression
relation-><|<=|==|!=|>=|>
