ACCEPTED
Production strings: [program -> [start, compound_statement], compound_statement -> [{, statement_list, }], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [write_statement], write_statement -> [write, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [write_statement], write_statement -> [write, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [CONST], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [string], statement_list -> [statement_list, statement], statement -> [structure_statement], structure_statement -> [if_statement], if_statement -> [if, (, condition, ), {, statement, }, else, {, statement, }], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [CONST], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], condition -> [ar_expression, relation, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], relation -> [>], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [structure_statement], structure_statement -> [if_statement], if_statement -> [if, (, condition, ), {, statement, }, else, {, statement, }], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], statement -> [simple_statement, ;], simple_statement -> [assignment_statement], assignment_statement -> [IDENTIFIER, =, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], condition -> [ar_expression, relation, ar_expression], ar_expression -> [term], term -> [IDENTIFIER], relation -> [>], ar_expression -> [term], term -> [IDENTIFIER], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [read_statement], read_statement -> [read, (, IDENTIFIER, )], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement_list, statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int], statement_list -> [statement], statement -> [simple_statement, ;], simple_statement -> [declaration], declaration -> [primitive_declaration], primitive_declaration -> [simple_type, IDENTIFIER], simple_type -> [int]]
Production number: [0, 3, 2, 4, 9, 24, 2, 4, 9, 24, 2, 4, 7, 20, 45, 27, 2, 4, 6, 13, 15, 18, 2, 5, 11, 21, 4, 7, 20, 45, 27, 4, 7, 20, 45, 26, 34, 45, 26, 33, 45, 26, 2, 5, 11, 21, 4, 7, 20, 45, 26, 4, 7, 20, 45, 26, 34, 45, 26, 33, 45, 26, 2, 4, 6, 13, 15, 17, 2, 4, 8, 23, 2, 4, 8, 23, 2, 4, 8, 23, 2, 4, 6, 13, 15, 17, 2, 4, 6, 13, 15, 17, 1, 4, 6, 13, 15, 17]
